const t=async(t,e=null)=>{t.classList.remove("hidden"),await a("enter",t,e)},e=async(t,e=null)=>{await a("leave",t,e),t.classList.add("hidden")},a=async(t,e,a)=>{const o=e.dataset,m=a?`${a}-${t}`:t;let $=`transition${t.charAt(0).toUpperCase()+t.slice(1)}`;const d=o[$]?o[$].split(" "):[m],l=o[`${$}Start`]?o[`${$}Start`].split(" "):[`${m}-start`],c=o[`${$}End`]?o[`${$}End`].split(" "):[`${m}-end`];n(e,d),n(e,l),await i(),s(e,l),n(e,c),await r(e),s(e,c),s(e,d)},n=(t,e)=>{t.classList.add(...e)},s=(t,e)=>{t.classList.remove(...e)},i=()=>new Promise((t=>{requestAnimationFrame((()=>{requestAnimationFrame(t)}))})),r=t=>new Promise((e=>{const a=getComputedStyle(t).transitionDuration.split(",")[0],n=1e3*Number(a.replace("s",""));setTimeout((()=>e()),n)}));export{r as a,t as e,e as l,i as n}